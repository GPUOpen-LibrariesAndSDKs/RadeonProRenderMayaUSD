proc setLatestLoadStageFolder( string $sceneFolder )
{
    optionVar -stringValue mayaUsd_LatestLoadStageFolder $sceneFolder;
}

proc string getLatestLoadStageFolder()
{
    string $sceneFolder;

    // First check if we've saved a location in the option var
    if (`optionVar -exists mayaUsd_LatestLoadStageFolder`)
    {
        $sceneFolder = `optionVar -q mayaUsd_LatestLoadStageFolder`;
    }

    // Then check if there is a current Maya scene, if so choose that as
    // a starting point.
    if ("" == $sceneFolder)
    {
        $sceneFolder = dirname(`file -q -sceneName`);
    }

    // If we are really starting from scratch then just go with the 
    // current workspace location for scenes.
    if ("" == $sceneFolder)
    {
        string $workspaceLocation = `workspace -q -fn`;
        string $scenesFolder = `workspace -q -fileRuleEntry "scene"`;
        $sceneFolder = $workspaceLocation + "/" + $scenesFolder;
    }

    return $sceneFolder;
}

proc setOptionVars(int $forceFactorySettings)
{
    if ($forceFactorySettings || !`optionVar -exists stageFromFile_primPath`) {
        optionVar -stringValue stageFromFile_primPath "";
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_excludePrimPath`) {
        optionVar -stringValue stageFromFile_excludePrimPath "";
    }

    if ($forceFactorySettings || !`optionVar -exists stageFromFile_loadPayloads`) {
        optionVar -intValue stageFromFile_loadPayloads 1;
    }
}

global proc string RprUsd_DoCreateStage(string $fileName)
{
    // actually load the file
    string $baseName = basenameEx($fileName);
    if( ! isValidObjectName($baseName) )
        $baseName = "UsdStage";

    string $ppath = `optionVar -q stageFromFile_primPath`;
    string $exppath = `optionVar -q stageFromFile_excludePrimPath`;
    int $loadp = `optionVar -q stageFromFile_loadPayloads`;

    string $fileNameToSave = $fileName;
    if (`optionVar -exists mayaUsd_MakePathRelativeToSceneFile` && `optionVar -query mayaUsd_MakePathRelativeToSceneFile`) {
        $fileNameToSave = `python("import mayaUsd.lib as mayaUsdLib; mayaUsdLib.Util.getPathRelativeToMayaSceneFile('" + $fileName + "')")`;
    }

    string $shapeNode = `createNode "mayaUsdProxyShape" -skipSelect -name ($baseName+"Shape")`;
    setAttr -type "string" ($shapeNode+".filePath") $fileNameToSave;
    setAttr -type "string" ($shapeNode+".primPath") $ppath;
    setAttr -type "string" ($shapeNode+".excludePrimPaths") $exppath;
    setAttr ($shapeNode+".loadPayloads") $loadp;
    connectAttr time1.outTime ($shapeNode+".time");
    select -r $shapeNode;
    string $fullPath[] = `ls -l $shapeNode`;
    return $fullPath[0];
}

global proc RprUsd_CreateStageFromFile()
{
    setOptionVars(false);
    
    $caption = getMayaUsdString("kCreateUsdStageFromFile");
    $fileFilter = python("from mayaUsdUtils import getUSDDialogFileFilters; getUSDDialogFileFilters()");
    $okCaption = getMayaUsdString("kCreateStage");
    
    string $startFolder = getLatestLoadStageFolder();

    string $result[] = `fileDialog2 
        -fileMode 1
        -caption $caption
        -fileFilter $fileFilter 
        -okCaption $okCaption
        -dir $startFolder
        -optionsUICreate "stageFromFile_UISetup"
        -optionsUIInit "stageFromFile_UIInit"
        -optionsUICommit "stageFromFile_UICommit"`;

    if (size($result) > 0) {
        setLatestLoadStageFolder( dirname($result[0]) );
        rprUsdOpenStudioStage -f $result[0];
    }
}
